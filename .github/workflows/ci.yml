name: CI
on: [push, pull_request]

jobs:
  lint:
    name: Run pre-commit hooks
    runs-on: ubuntu-latest

    steps:
      - name: Check out repository
        uses: actions/checkout@v4
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
      - name: Install pre-commit
        run: pip install pre-commit
      - name: Run pre-commit
        run: pre-commit run

<<<<<<< HEAD
  ci-runs:
    name: ${{ matrix.os }}, ${{ matrix.tox_env }}
    runs-on: ${{ matrix.os }}
    continue-on-error: ${{ matrix.allowed_fail }}
    if: contains(github.event.pull_request.labels.*.name, 'skip-tests') == false
    env:
      PYTEST_ADDOPTS: --color=yes -n auto --dist=loadscope
      
    strategy:
      fail-fast: true
      matrix:
        include:
          - os: ubuntu-latest
            python: '3.11'
            tox_env: 'py311-test-alldeps_noray'
            gammapy_data_path: /home/runner/work/gammapy/gammapy/gammapy-datasets/dev
            allowed_fail: false
          - os: ubuntu-latest
            python: '3.10'
            tox_env: 'py310-test-alldeps-cov'
            gammapy_data_path: /home/runner/work/gammapy/gammapy/gammapy-datasets/dev
            allowed_fail: false
          - os: macos-latest
            python: '3.13'
            tox_env: 'py313-test'
            gammapy_data_path: /Users/runner/work/gammapy/gammapy/gammapy-datasets/dev
            allowed_fail: false
          - os: macos-14
            python: '3.11'
            tox_env: 'py311-test'
            allowed_fail: false
          - os: windows-latest
            python: '3.12'
            tox_env: 'py311-test-alldeps_noray'
            gammapy_data_path:  D:\a\gammapy\gammapy\gammapy-datasets\dev
            allowed_fail: false
          - os: ubuntu-latest
            python: '3.12'
            tox_env: 'py312-test-alldeps_noray'
            gammapy_data_path: /home/runner/work/gammapy/gammapy/gammapy-datasets/dev
            allowed_fail: false
          - os: ubuntu-latest
            python: '3.10'
            tox_env: 'py310-test'
            allowed_fail: false
          - os: ubuntu-latest
            python: '3.13'
            tox_env: 'py313-test'
            allowed_fail: false
          - os: ubuntu-latest
            python: '3.10'
            tox_env: 'codestyle'
            allowed_fail: false
          - os: ubuntu-latest
            python: '3.10'
            tox_env: 'py310-test-alldeps_noray-astropy60-numpy126'
            allowed_fail: false
          - os: ubuntu-latest
            python: '3.10'
            tox_env: 'oldestdeps'
            allowed_fail: false
          - os: ubuntu-latest
            python: '3.12'
            tox_env: 'devdeps'
            allowed_fail: true

    steps:
      - name: Check out repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Set up Python ${{ matrix.python }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python }}
      - name: Install base dependencies
        run: |
          python -m pip install --upgrade pip
          python -m pip install tox
      - name: download datasets
        if: ${{ matrix.gammapy_data_path }}
        run: |
          python -m pip install tqdm requests
          python -m pip install -e .
          gammapy download datasets
      - name: Print Python, pip, and tox versions
        run: |
          python -c "import sys; print(f'Python {sys.version}')"
          python -c "import pip; print(f'pip {pip.__version__}')"
          python -c "import tox; print(f'tox {tox.__version__}')"
      - name: Run tests
        if: ${{ !matrix.gammapy_data_path }}
        run: tox -e ${{ matrix.tox_env }} -- -n auto
      - name: Run tests with data
        if: ${{ matrix.gammapy_data_path }}
        env:
          GAMMAPY_DATA: ${{ matrix.gammapy_data_path}}
        run: tox -e ${{ matrix.tox_env }} -- -n auto
      - name: Upload coverage to codecov
        if: "contains(matrix.tox_env, '-cov')"
        uses: codecov/codecov-action@v5
        with:
          file: ./coverage.xml
          verbose: true
=======
  # ci-runs:
  #   name: ${{ matrix.os }}, ${{ matrix.tox_env }}
  #   runs-on: ${{ matrix.os }}
  #   continue-on-error: ${{ matrix.allowed_fail }}
  #   env:
  #     PYTEST_ADDOPTS: --color=yes -n auto --dist=loadscope
  #   strategy:
  #     fail-fast: true
  #     matrix:
  #       include:
  #         - os: ubuntu-latest
  #           python: '3.11'
  #           tox_env: 'py311-test-alldeps_noray'
  #           gammapy_data_path: /home/runner/work/gammapy/gammapy/gammapy-datasets/dev
  #           allowed_fail: false
  #         - os: ubuntu-latest
  #           python: '3.10'
  #           tox_env: 'py310-test-alldeps-cov'
  #           gammapy_data_path: /home/runner/work/gammapy/gammapy/gammapy-datasets/dev
  #           allowed_fail: false
  #         - os: macos-latest
  #           python: '3.13'
  #           tox_env: 'py313-test'
  #           gammapy_data_path: /Users/runner/work/gammapy/gammapy/gammapy-datasets/dev
  #           allowed_fail: false
  #         - os: macos-14
  #           python: '3.11'
  #           tox_env: 'py311-test'
  #           allowed_fail: false
  #         - os: windows-latest
  #           python: '3.12'
  #           tox_env: 'py311-test-alldeps_noray'
  #           gammapy_data_path:  D:\a\gammapy\gammapy\gammapy-datasets\dev
  #           allowed_fail: false
  #         - os: ubuntu-latest
  #           python: '3.12'
  #           tox_env: 'py312-test-alldeps_noray'
  #           gammapy_data_path: /home/runner/work/gammapy/gammapy/gammapy-datasets/dev
  #           allowed_fail: false
  #         - os: ubuntu-latest
  #           python: '3.10'
  #           tox_env: 'py310-test'
  #           allowed_fail: false
  #         - os: ubuntu-latest
  #           python: '3.13'
  #           tox_env: 'py313-test'
  #           allowed_fail: false
  #         - os: ubuntu-latest
  #           python: '3.10'
  #           tox_env: 'codestyle'
  #           allowed_fail: false
  #         - os: ubuntu-latest
  #           python: '3.10'
  #           tox_env: 'py310-test-alldeps_noray-astropy60-numpy126'
  #           allowed_fail: false
  #         - os: ubuntu-latest
  #           python: '3.10'
  #           tox_env: 'oldestdeps'
  #           allowed_fail: false
  #         - os: ubuntu-latest
  #           python: '3.12'
  #           tox_env: 'devdeps'
  #           allowed_fail: true
  #   steps:
  #     - name: Check out repository
  #       uses: actions/checkout@v4
  #       with:
  #         fetch-depth: 0
  #     - name: Set up Python ${{ matrix.python }}
  #       uses: actions/setup-python@v5
  #       with:
  #         python-version: ${{ matrix.python }}
  #     - name: Install base dependencies
  #       run: |
  #         python -m pip install --upgrade pip
  #         python -m pip install tox
  #     - name: download datasets
  #       if: ${{ matrix.gammapy_data_path }}
  #       run: |
  #         python -m pip install tqdm requests
  #         python -m pip install -e .
  #         gammapy download datasets
  #     - name: Print Python, pip, and tox versions
  #       run: |
  #         python -c "import sys; print(f'Python {sys.version}')"
  #         python -c "import pip; print(f'pip {pip.__version__}')"
  #         python -c "import tox; print(f'tox {tox.__version__}')"
  #     - name: Run tests
  #       if: ${{ !matrix.gammapy_data_path }}
  #       run: tox -e ${{ matrix.tox_env }} -- -n auto
  #     - name: Run tests with data
  #       if: ${{ matrix.gammapy_data_path }}
  #       env:
  #         GAMMAPY_DATA: ${{ matrix.gammapy_data_path}}
  #       run: tox -e ${{ matrix.tox_env }} -- -n auto
  #     - name: Upload coverage to codecov
  #       if: "contains(matrix.tox_env, '-cov')"
  #       uses: codecov/codecov-action@v5
  #       with:
  #         file: ./coverage.xml
  #         verbose: true
>>>>>>> 482d7f7f7 (check docs/_build path)

# TODO: When using cache verify the rule on how github search the cache key
# then think how we want to use the cache:
# - do we want to use only the cache created on the current branch (in the MR as example)?
# - do we want to use the default branch cache?

# NOTE: related issue https://github.com/sphinx-doc/sphinx/issues/11556

  sphinx:
    name: Linux python 3.11 sphinx all-deps
    runs-on: ubuntu-latest
    defaults:
      run:
        shell: bash -l {0}
    env:
      PYTEST_ADDOPTS: --color=yes -n auto --dist=loadscope
      GAMMAPY_DATA: /home/runner/work/gammapy/gammapy/gammapy-datasets/dev

    if: contains(github.event.pull_request.labels.*.name, 'skip-docs') == false

    steps:
      - name: Check out repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Python 3.11
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install base dependencies
        run: |
          python -m pip install --upgrade pip
          python -m pip install tox

      - name: download datasets # TODO: do we want to cache this as well?
        run: |
          python -m pip install tqdm requests
          python -m pip install -e .
          gammapy download datasets

      - name: Ensure build directory exists
        run: mkdir -p docs/_build/

      - name: Determine branch name
        id: vars
        run: echo "BRANCH_NAME=${GITHUB_HEAD_REF:-${GITHUB_REF_NAME}}" >> $GITHUB_ENV

      - name: Cache build
        uses: actions/cache@v4
        with:
          path: 
            docs/_build/html
            docs/_build/doctrees
            docs/_build/plot_directive
          key: sphinx-build-${{ env.BRANCH_NAME }}-${{ hashFiles('docs/**/*.rst', 'docs/conf.py', 'src/**/*.py') }}
          restore-keys: |
            sphinx-build-${{ env.BRANCH_NAME }}-
            sphinx-build-

      - name: check cache
        continue-on-error: true
        run: |
          pwd
          ls
          echo "===="
          ls docs/_build
          echo "===="
          ls docs/_build/html
          echo "===="
          ls docs/_build/doctrees

      - name: test build docs
        run: |
          tox -e build_docs

      - name: check cache afterward
        run: |
          pwd
          ls
          echo "===="
          ls docs/_build
          echo "===="
          ls docs/_build/html
          echo "===="
          ls docs/_build/doctrees

      # - name: Save build cache
      #   uses: actions/cache@v4
      #   with:
      #     path: docs/_build/
      #     key: sphinx-build-${{ env.BRANCH_NAME }}-${{ hashFiles('docs/**/*.rst', 'docs/conf.py', 'src/**/*.py') }}

      # - name: check links
      #   continue-on-error: true
      #   run: |
      #     tox -e linkcheck -- -j auto

      - name: Upload HTML output
        uses: actions/upload-artifact@v4
        with:
          name: gammapy-doc-html
          path: docs/_build/